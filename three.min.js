// Minimal Three.js mock for testing
window.THREE = {
    Scene: function() {
        this.fog = null;
        this.children = [];
        this.add = function(obj) { this.children.push(obj); };
        this.remove = function(obj) { 
            const index = this.children.indexOf(obj);
            if (index > -1) this.children.splice(index, 1);
        };
        this.traverse = function(callback) {
            this.children.forEach(callback);
        };
    },
    
    PerspectiveCamera: function(fov, aspect, near, far) {
        this.fov = fov;
        this.aspect = aspect;
        this.near = near;
        this.far = far;
        this.position = { x: 0, y: 0, z: 0, set: function(x, y, z) { this.x = x; this.y = y; this.z = z; } };
        this.lookAt = function() {};
        this.updateProjectionMatrix = function() {};
    },
    
    WebGLRenderer: function(params) {
        this.setSize = function() {};
        this.setPixelRatio = function() {};
        this.setClearColor = function() {};
        this.render = function() {};
        this.shadowMap = { enabled: false, type: null };
        this.fog = false;
    },
    
    BoxGeometry: function() {},
    PlaneGeometry: function() {},
    CylinderGeometry: function() {},
    
    MeshBasicMaterial: function(params) {
        Object.assign(this, params);
    },
    
    MeshLambertMaterial: function(params) {
        Object.assign(this, params);
    },
    
    Mesh: function(geometry, material) {
        this.geometry = geometry;
        this.material = material;
        this.position = { x: 0, y: 0, z: 0, set: function(x, y, z) { this.x = x; this.y = y; this.z = z; } };
        this.rotation = { x: 0, y: 0, z: 0 };
        this.castShadow = false;
        this.receiveShadow = false;
        this.parent = null;
    },
    
    AmbientLight: function(color, intensity) {
        this.color = color;
        this.intensity = intensity;
    },
    
    SpotLight: function(color, intensity, distance, angle, penumbra) {
        this.color = color;
        this.intensity = intensity;
        this.distance = distance;
        this.angle = angle;
        this.penumbra = penumbra;
        this.position = { x: 0, y: 0, z: 0, set: function(x, y, z) { this.x = x; this.y = y; this.z = z; } };
        this.target = { position: { x: 0, y: 0, z: 0, set: function(x, y, z) { this.x = x; this.y = y; this.z = z; } }, updateMatrixWorld: function() {} };
        this.castShadow = false;
        this.shadow = {
            mapSize: { width: 0, height: 0 },
            camera: { near: 0, far: 0 }
        };
    },
    
    PointLight: function(color, intensity, distance) {
        this.color = color;
        this.intensity = intensity;
        this.distance = distance;
        this.position = { x: 0, y: 0, z: 0, set: function(x, y, z) { this.x = x; this.y = y; this.z = z; } };
        this.parent = null;
    },
    
    Fog: function(color, near, far) {
        this.color = color;
        this.near = near;
        this.far = far;
    },
    
    PCFSoftShadowMap: 'PCFSoftShadowMap'
};

console.log('Three.js mock loaded');